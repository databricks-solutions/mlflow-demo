#!/bin/bash

# Setup script for .env.local file
# This script will help you configure your .env.local file

ENV_FILE=".env.local"

echo "🔧 Environment Setup Script"
echo "This script will help you configure your .env.local file"
echo ""

# Function to extract value from .env.local file
get_env_value() {
    local key=$1
    if [ -f "$ENV_FILE" ]; then
        grep "^${key}=" "$ENV_FILE" | cut -d'=' -f2- | sed 's/^"//;s/"$//'
    fi
}

# Function to prompt with existing value
prompt_with_existing() {
    local key=$1
    local prompt=$2
    local existing_value=$(get_env_value "$key")
    local new_value

    if [ ! -z "$existing_value" ]; then
        read -p "$prompt [current: $existing_value]: " new_value
        if [ -z "$new_value" ]; then
            echo "$existing_value"
        else
            echo "$new_value"
        fi
    else
        read -p "$prompt: " new_value
        echo "$new_value"
    fi
}


# Check if .env.local already exists
EXISTING_CONFIG=false
if [ -f "$ENV_FILE" ]; then
    echo "⚠️  .env.local file already exists!"
    echo ""
    echo "Choose an option:"
    echo "1) Update existing values (keep current values, only change what you want)"
    echo "2) Overwrite completely (start fresh)"
    echo "3) Skip configuration (keep existing file as-is)"
    echo ""
    read -p "Enter your choice (1/2/3): " -n 1 -r
    echo ""
    case $REPLY in
        1)
            echo "📝 Updating existing configuration..."
            EXISTING_CONFIG=true
            ;;
        2)
            echo "📝 Creating new configuration..."
            ;;
        3)
            echo "✅ Keeping existing configuration."
            echo ""
            # Skip to dependency installation
            DATABRICKS_HOST=""
            DATABRICKS_TOKEN=""
            DATABRICKS_APP_NAME=""
            LHA_SOURCE_CODE_PATH=""
            MLFLOW_EXPERIMENT_ID=""
            UC_CATALOG=""
            UC_SCHEMA=""
            LLM_MODEL=""
            DATABRICKS_CONFIG_PROFILE=""
            ;;
        *)
            echo "❌ Invalid choice. Exiting."
            exit 1
            ;;
    esac
    echo ""
fi

# Only prompt for configuration if not skipping
if [[ $REPLY != "3" ]]; then
    echo "📝 Please provide the following configuration values:"
    if [ "$EXISTING_CONFIG" = true ]; then
        echo "(Press Enter to keep current value, or type new value to change)"
    fi
    echo ""

    # Prompt for required variables with existing values
    if [ "$EXISTING_CONFIG" = true ]; then
        DATABRICKS_HOST=$(prompt_with_existing "DATABRICKS_HOST" "DATABRICKS_HOST")
        DATABRICKS_TOKEN=$(prompt_with_existing "DATABRICKS_TOKEN" "DATABRICKS_TOKEN (hidden)")
        DATABRICKS_APP_NAME=$(prompt_with_existing "DATABRICKS_APP_NAME" "DATABRICKS_APP_NAME")
        LHA_SOURCE_CODE_PATH=$(prompt_with_existing "LHA_SOURCE_CODE_PATH" "LHA_SOURCE_CODE_PATH")
        MLFLOW_EXPERIMENT_ID=$(prompt_with_existing "MLFLOW_EXPERIMENT_ID" "MLFLOW_EXPERIMENT_ID")
        UC_CATALOG=$(prompt_with_existing "UC_CATALOG" "UC_CATALOG")
        UC_SCHEMA=$(prompt_with_existing "UC_SCHEMA" "UC_SCHEMA")

        # Optional variables
        echo ""
        echo "📝 Optional configuration:"
        LLM_MODEL=$(prompt_with_existing "LLM_MODEL" "LLM_MODEL (optional)")
        DATABRICKS_CONFIG_PROFILE=$(prompt_with_existing "DATABRICKS_CONFIG_PROFILE" "DATABRICKS_CONFIG_PROFILE (optional)")
    else
        read -p "DATABRICKS_HOST (e.g., https://your-workspace.cloud.databricks.com): " DATABRICKS_HOST
        read -p "DATABRICKS_TOKEN (your Databricks personal access token): " DATABRICKS_TOKEN
        read -p "DATABRICKS_APP_NAME (name of your Databricks app): " DATABRICKS_APP_NAME
        read -p "LHA_SOURCE_CODE_PATH (path to the source folder of your Databricks app in your Databricks workspace): " LHA_SOURCE_CODE_PATH
        read -p "MLFLOW_EXPERIMENT_ID (MLflow experiment ID): " MLFLOW_EXPERIMENT_ID
        read -p "UC_CATALOG (Unity Catalog name in which you have a schema with EDIT permissions): " UC_CATALOG
        read -p "UC_SCHEMA (Unity Catalog schema name where you have EDIT permissions): " UC_SCHEMA

        # Optional variables
        echo ""
        echo "📝 Optional configuration:"
        read -p "LLM_MODEL (any Model Serving / AI Gateway endpoint, if not set, defaults to databricks-claude-3-7-sonnet): " LLM_MODEL
        read -p "DATABRICKS_CONFIG_PROFILE (optional - press Enter to skip): " DATABRICKS_CONFIG_PROFILE
    fi
fi

# Create the .env.local file (only if not skipping configuration)
if [[ $REPLY != "3" ]]; then
    echo ""
    echo "📄 Creating .env.local file..."

    cat > "$ENV_FILE" << EOF
# Generated by setup.sh on $(date)

DATABRICKS_HOST="$DATABRICKS_HOST"
DATABRICKS_TOKEN="$DATABRICKS_TOKEN"
DATABRICKS_APP_NAME="$DATABRICKS_APP_NAME"
LHA_SOURCE_CODE_PATH="$LHA_SOURCE_CODE_PATH"
MLFLOW_EXPERIMENT_ID="$MLFLOW_EXPERIMENT_ID"
UC_CATALOG="$UC_CATALOG"
UC_SCHEMA="$UC_SCHEMA"
EOF

    # Add optional variables if provided
    if [ ! -z "$LLM_MODEL" ]; then
        echo "LLM_MODEL=\"$LLM_MODEL\"" >> "$ENV_FILE"
    else
        echo "LLM_MODEL=\"databricks-claude-3-7-sonnet\"" >> "$ENV_FILE"
    fi

    if [ ! -z "$DATABRICKS_CONFIG_PROFILE" ]; then
        echo "DATABRICKS_CONFIG_PROFILE=\"$DATABRICKS_CONFIG_PROFILE\"" >> "$ENV_FILE"
    fi

    # Add fixed configuration variables
    echo "MLFLOW_ENABLE_ASYNC_TRACE_LOGGING=\"false\"" >> "$ENV_FILE"
    echo "PROMPT_NAME=\"email_generation\"" >> "$ENV_FILE"
    echo "PROMPT_ALIAS=\"production\"" >> "$ENV_FILE"
    echo "MLFLOW_TRACKING_URI=\"databricks\"" >> "$ENV_FILE"

    echo ""
    echo "✅ .env.local file created successfully!"
    echo ""
    echo "📋 Summary of configuration:"
    echo "  DATABRICKS_HOST: $DATABRICKS_HOST"
    echo "  DATABRICKS_TOKEN: [HIDDEN]"
    echo "  DATABRICKS_APP_NAME: $DATABRICKS_APP_NAME"
    echo "  LHA_SOURCE_CODE_PATH: $LHA_SOURCE_CODE_PATH"
    echo "  MLFLOW_EXPERIMENT_ID: $MLFLOW_EXPERIMENT_ID"
    echo "  UC_CATALOG: $UC_CATALOG"
    echo "  UC_SCHEMA: $UC_SCHEMA"
    if [ ! -z "$LLM_MODEL" ]; then
        echo "  LLM_MODEL: $LLM_MODEL"
    else
        echo "  LLM_MODEL: databricks-claude-3-7-sonnet (default)"
    fi
    if [ ! -z "$DATABRICKS_CONFIG_PROFILE" ]; then
        echo "  DATABRICKS_CONFIG_PROFILE: $DATABRICKS_CONFIG_PROFILE"
    fi
fi

echo ""
echo "📦 Installing dependencies..."
echo ""

# Install Python dependencies
echo "🐍 Installing Python dependencies with uv..."
if command -v uv >/dev/null 2>&1; then
    uv sync
    echo "✅ Python dependencies installed successfully!"
else
    echo "❌ uv is not installed."
    echo ""
    read -p "Would you like to install uv now? (Y/n): " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo "⚠️  Skipping Python dependency installation. You can install uv later with:"
        echo "   curl -LsSf https://astral.sh/uv/install.sh | sh"
    else
        echo "📥 Installing uv..."
        curl -LsSf https://astral.sh/uv/install.sh | sh
        # Source the shell to get uv in PATH
        export PATH="$HOME/.cargo/bin:$PATH"
        if command -v uv >/dev/null 2>&1; then
            echo "✅ uv installed successfully!"
            uv sync
            echo "✅ Python dependencies installed successfully!"
        else
            echo "❌ uv installation failed. Please restart your terminal and run setup again."
        fi
    fi
fi

echo ""

# Install frontend dependencies
echo "📱 Installing frontend dependencies with bun..."
if command -v bun >/dev/null 2>&1; then
    # Remove any npm lock files that shouldn't be there
    [ -f client/package-lock.json ] && rm client/package-lock.json
    pushd client > /dev/null
    bun install
    popd > /dev/null
    echo "✅ Frontend dependencies installed successfully!"
else
    echo "❌ bun is not installed."
    echo ""
    read -p "Would you like to install bun now? (Y/n): " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo "⚠️  Skipping frontend dependency installation. You can install bun later with:"
        echo "   curl -fsSL https://bun.sh/install | bash"
    else
        echo "📥 Installing bun..."
        curl -fsSL https://bun.sh/install | bash
        # Source the shell to get bun in PATH
        export BUN_INSTALL="$HOME/.bun"
        export PATH="$BUN_INSTALL/bin:$PATH"
        if command -v bun >/dev/null 2>&1; then
            echo "✅ bun installed successfully!"
            # Remove any npm lock files that shouldn't be there
            [ -f client/package-lock.json ] && rm client/package-lock.json
            pushd client > /dev/null
            bun install
            popd > /dev/null
            echo "✅ Frontend dependencies installed successfully!"
        else
            echo "❌ bun installation failed. Please restart your terminal and run setup again."
        fi
    fi
fi

echo ""
echo "🚀 Setup complete! You can now run your application with these environment variables!"
echo ""
echo "📋 Next steps:"
echo "  1. Load the sample data by running './load_sample_data.sh'"
echo "  2. Run './watch.sh' to start development servers"
echo "  3. Open http://localhost:8000 to see your app"
